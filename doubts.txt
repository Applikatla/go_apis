Why Use bytes.NewBuffer(jsonData) Instead of Directly Passing jsonData?
The function http.Post(url, contentType string, body io.Reader) requires the third argument (body) to be an io.Reader.

1Ô∏è‚É£ jsonData is a []byte (slice of bytes)
When you do json.Marshal(t), it returns a []byte (a byte slice).
But http.Post expects an io.Reader, not a []byte.
2Ô∏è‚É£ bytes.NewBuffer(jsonData) Converts []byte into an io.Reader
bytes.NewBuffer(jsonData) wraps the byte slice and makes it compatible with io.Reader.
This allows http.Post to stream the request body properly.


What is json.Marshal() in Go?
json.Marshal() converts a Go struct into a JSON string. It is the opposite of json.Unmarshal().

When to Use json.Marshal()?
‚úÖ If you need a JSON string (e.g., logging, sending as response manually)
‚úÖ If you are writing to a file or an external API
‚úÖ If you want more control over encoding

But if you‚Äôre using Gin, c.JSON() automatically marshals your struct to JSON, so you don‚Äôt need to call json.Marshal() manually.

üìå Key Differences: json.Marshal() vs json.Unmarshal()

json.Marshal(v)	Converts Go struct ‚Üí JSON string
json.Unmarshal(data, &v)	Converts JSON string ‚Üí Go struct
